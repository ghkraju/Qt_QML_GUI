# Linux-specific:
steps:
# .............................................
# ....Get the sources as well as artifacts.....
# .............................................
# Checkout the code needed for the pipeline
  - checkout: self
    submodules: true

# .............................................
# ...Prepare Command Development Environment...
# .............................................
# Get the secrets needed for installing components
  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'Azure pay as you go subscription(536e7fb0-2ead-4833-bd2c-c8bcf1fc41a7)'
      KeyVaultName: 'CIPipelineKeyVault'
      SecretsFilter: '*'
      RunAsPreJob: true

# Install Qt Tools
#  - script: | 
#      echo Hello, Azure agent is now installing the necessary build tools...!
#      cd $(Build.BinariesDirectory)
#      wget https://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run
#      chmod 755 qt-unified-linux-x64-online.run
#      ./qt-unified-linux-x64-online.run install qt.qt5.5150.gcc_64 qt.qt5.5150.qtcore qt.qt5.5150.qtgui qt.qt5.5150.qtquick qt.qt5.5150.qtqml qt.tools.ifw.41 --root $(Build.BinariesDirectory)/Qt --auto-answer telemetry-question=Yes,AssociateCommonFiletypes=Yes --default-answer --accept-licenses --accept-obligations --file-query --email "hemanth_kumar.guntamadugu@sandvik.com" --pw "$(QtPassword)" --confirm-command
#    displayName: 'Install Qt Commercial'

# .............................................
# ...............Build procedure...............
# .............................................
  - script: | 
      echo Hello, Azure agent is now compiling the sources from pipeline!
      cd $(Build.SourcesDirectory)/sources
      mkdir build
      cd build
      ~/Qt/5.15.0/gcc_64/bin/qmake ../Crypto_QML_GUI.pro
      make
    displayName: 'Compiling the source code...!'
#      $(Build.BinariesDirectory)/Qt/5.15.0/gcc_64/bin/qmake ../Crypto_QML_GUI.pro

  - script: | 
      echo Hello, Azure agent is now compiling the sources from pipeline!
      cd $(Build.SourcesDirectory)/tests/unit-tests
      mkdir build
      cd build
      ~/Qt/5.15.0/gcc_64/bin/qmake ../unit-tests.pro
      make
    displayName: 'Compiling the unit-tests...!'
#      $(Build.BinariesDirectory)/Qt/5.15.0/gcc_64/bin/qmake ../unit-tests.pro

# .............................................
# .................Unit Tests..................
# .............................................
  - script: | 
      echo Hello, Azure agent is now compiling the sources from pipeline!
      cd $(Build.SourcesDirectory)/tests/unit-tests/build
      ./unit-tests -o $(Pipeline.Workspace)/a/unit-tests-result.xml,junitxml
    displayName: 'Execution of unit-tests...!'

  - task: PublishTestResults@2
    displayName: 'Publish Unit-test Results $(Pipeline.Workspace)/a/unit-tests-result.xml'
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/a/unit-tests-result.xml'

# .............................................
# ..............Functional Tests...............
# .............................................
#  - script: | 
#      echo Hello, Azure agent is now compiling the sources from pipeline!
#      cd $(Build.SourcesDirectory)/tests/qml-tests/build
#      unit-tests -o $(Pipeline.Workspace)/a/qml-tests-result.xml,junitxml
#      make
#    displayName: 'Execution of functional-tests...!'

# Task to run the automated tests this might be migrated to Release Pipeline and here only concentrate on the Units tests
#- task: SquishTask@1
#  inputs:
#    squishFolder: '/Applications/Squish for Qt 6.7.1'
#    squishTestSuites: '/Users/ghkraju/Documents/Projects/Qt_QML_GUI/TestSuite/suite_QML_GUI'
#    squishReportGenTestcenter: true
#    squishTestcenterURL: 'http://localhost:8800'
#    squishTestcenterProject: 'QML_GUI'
#    squishTestcenterToken: 'ccl6SFLAIBC4HMZHPH6eMIdYA9W6dMHh9WYCFRcbpWc'

#- task: SquishTestcenterTask@1
#  inputs:
#    squishTestcenterURL: 'http://localhost:8800'
#    squishTestcenterProject: 'QML_GUI'

# .............................................
# .............Copying Artifacts...............
# .............................................
  - task: CopyFiles@2
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/sources/build
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true

# .............................................
# ................System Tests.................
# .............................................
# Deploy the application to target device and perform some basic tests

# .............................................
# .................Versioning..................
# .............................................
# Versioning using Git Tools
#  - task: UniversalPackages@0
#    inputs:
#      command: 'publish'
#      publishDirectory: '$(Build.ArtifactStagingDirectory)'
#      feedsToUsePublish: 'internal'
#      vstsFeedPublish: 'd9e18571-4868-4836-a3ec-5f9dd2594d30'
#      vstsFeedPackagePublish: 'crypto_qml_gui'
#      versionOption: 'minor'

# Publishing artifacts to the current pipeline so that it can be used by the other stages/jobs
  - task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'crypto_qml_gui'
    publishLocation: 'pipeline'

# .............................................
# ..................Clean-Up...................
# .............................................
#  - script: | 
#      echo Removing all the installed binaries for the build!
#      cd $(Build.BinariesDirectory)\\Qt
#      .\MaintenanceTool purge
#      cd $(Build.BinariesDirectory)
#      rm -r *
#    condition: always()
#    displayName: 'Reset Binaries directory'