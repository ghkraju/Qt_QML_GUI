# macOS-specific:
steps:
  - checkout: self
    submodules: true

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'Azure pay as you go subscription(536e7fb0-2ead-4833-bd2c-c8bcf1fc41a7)'
      KeyVaultName: 'CIPipelineKeyVault'
      SecretsFilter: '*'
      RunAsPreJob: true

  - script: | 
      echo Hello, Azure agent is now building from pipeline!
      wget https://download.qt.io/official_releases/online_installers/qt-unified-mac-x64-online.dmg -O installer
      .\installer install  qt.qt5.5150.qtcore qt.qt5.5150.qtgui qt.qt5.5150.qtquick qt.qt5.5150.qtqml qt.qt5.5150.win64_mingw81 qt.tools.ifw.41 qt.tools.win64_mingw810 --root ~/Qt --auto-answer telemetry-question=Yes,AssociateCommonFiletypes=Yes --default-answer --accept-licenses --accept-obligations --file-query --email hemanth_kumar.guntamadugu@sandvik.com --pw $(QtCommercial) --confirm-command
    displayName: 'Install Qt Commercial'

  - script: | 
      echo Hello, Azure agent is now building from pipeline!
      cd Crypto_QML_GUI
      mkdir build
      cd build
      qmake ../Crypto_QML_GUI.pro
      make
    displayName: 'Creating necessary build environment...!'

# Task to run the automated tests this might be migrated to Release Pipeline and here only concentrate on the Units tests
#- task: SquishTask@1
#  inputs:
#    squishFolder: '/Applications/Squish for Qt 6.7.1'
#    squishTestSuites: '/Users/ghkraju/Documents/Projects/Qt_QML_GUI/TestSuite/suite_QML_GUI'
#    squishReportGenTestcenter: true
#    squishTestcenterURL: 'http://localhost:8800'
#    squishTestcenterProject: 'QML_GUI'
#    squishTestcenterToken: 'ccl6SFLAIBC4HMZHPH6eMIdYA9W6dMHh9WYCFRcbpWc'

#- task: SquishTestcenterTask@1
#  inputs:
#    squishTestcenterURL: 'http://localhost:8800'
#    squishTestcenterProject: 'QML_GUI'

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'Crypto_QML_GUI/build'
      Contents: '**'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      CleanTargetFolder: true

  - task: UniversalPackages@0
    inputs:
      command: 'publish'
      publishDirectory: '$(Build.ArtifactStagingDirectory)'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: 'd9e18571-4868-4836-a3ec-5f9dd2594d30'
      vstsFeedPackagePublish: 'crypto_qml_gui'
      versionOption: 'minor'

  - script: | 
      echo Removing Qt Commercial Installation!
      cd C:\Qt
      .\MaintenanceTool.exe purge
    displayName: 'Remove Qt Commercial'

#steps:
#  - checkout: self
#    # 1
#    submodules: true
#  # 2
#  - script: brew install p7zip 
#    displayName: 'Install 7-zip'
#  - script: brew install create-dmg
#    displayName: 'Install create-dmg'
#  # 3
#  - task: UsePythonVersion@0 
#    inputs:
#      versionSpec: '3.x'
#  # 4
#  - script: | 
#      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_10.app/Contents/Developer"
#    displayName: 'Select Xcode 10'
#  # 5
#  - script: |
#      cd $(Build.SourcesDirectory)
#      python -m pip install aqtinstall
#    displayName: 'Install aqtinstall'
#  # 6
#  - script: | 
#      python -m aqt install --outputdir $(Build.BinariesDirectory)/Qt 5.14.0 mac desktop -m qtcore qtgui qtxml qtwidgets
#    displayName: 'Install Qt 5.14.0' 
#  # 7
#  - script: | 
#      cd $(Build.SourcesDirectory)
#      $(Build.BinariesDirectory)/Qt/5.14.0/clang_64/bin/qmake
#    displayName: 'Run qmake' 
#  # 8
#  - script: |
#      cd $(Build.SourcesDirectory)
#      make
#    displayName: 'Build!'
#  # 9
#  - script: $(Build.SourcesDirectory)/create-dmg.sh
#    displayName: 'Building DMG'
#  # 10
#  - task: CopyFiles@2 
#    inputs:
#      contents: app.dmg
#      targetFolder: $(Build.ArtifactStagingDirectory)
#  # 11
#  - task: PublishBuildArtifacts@1
#    inputs:
#      pathToPublish: $(Build.ArtifactStagingDirectory)
#      artifactName: MacOS_release